generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamptz(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime @db.Timestamptz(6)

  @@unique([identifier, token])
}

// Application Models
model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String    @db.VarChar(255)
  email         String    @unique @db.VarChar(255)
  emailVerified DateTime? @db.Timestamptz(6)
  image         String?
  password      String?   @db.VarChar(255)
  role          UserRole  @default(USER)
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  appointments  Appointment[]
  assignedLeads Lead[]        @relation("AssignedLeads")
  activities    Activity[]
  visionMarkers VisionMarker[]
  visits        Visit[]

  createdAt     DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime  @default(now()) @updatedAt @db.Timestamptz(6)
}

model Lead {
  id                        String    @id @db.VarChar(255)
  firstName                 String?   @db.VarChar(255)
  lastName                  String?   @db.VarChar(255)
  email                     String?   @db.VarChar(255)
  phone                     String?   @db.VarChar(50)
  address                   String?
  status                    LeadStatus @default(NEW)
  assignedToId              String?   @db.Uuid
  notes                     String?
  streetAddress             String?   @db.VarChar(255)
  city                      String?   @db.VarChar(100)
  state                     String?   @db.VarChar(100)
  zipcode                   String?   @db.VarChar(20)
  insuranceCompany          String?
  insurancePolicyNumber     String?
  insurancePhone            String?
  insuranceAdjusterName     String?
  insuranceAdjusterPhone    String?
  insuranceAdjusterEmail    String?
  insuranceDeductible       String?
  insuranceSecondaryPhone   String?
  adjusterAppointmentDate   DateTime? @db.Timestamptz(6)
  adjusterAppointmentTime   String?
  adjusterAppointmentNotes  String?
  googleEventId             String?
  latitude                  Decimal?  @db.Decimal(10,7)
  longitude                 Decimal?  @db.Decimal(10,7)
  createdAt                 DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt                 DateTime  @default(now()) @updatedAt @db.Timestamptz(6)

  // Relations
  assignedTo                User?     @relation("AssignedLeads", fields: [assignedToId], references: [id])
  appointments              Appointment[]
  activities               Activity[]
  visits                   Visit[]
  files                    File[]
  contracts                Contract[]

  @@index([assignedToId], map: "idx_leads_assigned_to")
  @@index([status], map: "idx_leads_status")
  @@index([latitude, longitude], map: "idx_leads_coordinates")
}

model Appointment {
  id          String    @id @default(uuid())
  title       String
  startTime   DateTime  @db.Timestamptz(6)
  endTime     DateTime  @db.Timestamptz(6)
  purpose     AppointmentPurpose
  status      AppointmentStatus @default(SCHEDULED)
  address     String?
  notes       String?
  
  // Relations
  leadId      String    @db.VarChar
  userId      String    @db.Uuid
  lead        Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime  @updatedAt @db.Timestamptz(6)

  @@index([leadId])
  @@index([userId])
  @@index([startTime])
}

model Activity {
  id          String       @id @default(uuid()) @db.Uuid
  type        ActivityType
  title       String
  description String?
  
  // Relations
  userId      String       @db.Uuid
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  leadId      String?      @db.VarChar(255)
  lead        Lead?        @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  status      ActivityStatus?
  createdAt   DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime     @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([userId])
  @@index([leadId])
  @@index([type])
  @@index([createdAt])
}

model VisionMarker {
  id             String    @id @default(uuid()) @db.Uuid
  latitude       Float
  longitude      Float
  address        String
  notes          String?
  status         KnockStatus @default(NOT_VISITED)
  contactInfo    Json?
  visits         Json?      // Consider creating a separate visits model if this data is structured
  followUp       Json?      // Consider creating a structured followUp model if needed
  
  // Relations
  userId         String?    @db.Uuid
  user           User?      @relation(fields: [userId], references: [id])

  createdAt      DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime   @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([latitude], map: "idx_vision_markers_lat")
  @@index([longitude], map: "idx_vision_markers_lng")
  @@index([status], map: "idx_vision_markers_status")
  @@index([userId])
}

model Visit {
  id             String    @id @default(uuid()) @db.Uuid
  address        String
  latitude       Float
  longitude      Float
  status         KnockStatus
  notes          String?
  followUpDate   DateTime? @db.Timestamptz(6)
  followUpTime   String?
  followUpNotes  String?
  
  // Relations
  leadId         String?   @db.VarChar(255)
  lead           Lead?     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  userId         String?   @db.Uuid
  user           User?     @relation(fields: [userId], references: [id])

  createdAt      DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime? @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([leadId])
  @@index([userId])
  @@index([status])
}

model ClientIdSequence {
  id      Int @id @default(autoincrement())
  lastId  Int @default(50000)
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  WON
  LOST
  ON_HOLD
}

enum AppointmentPurpose {
  INITIAL_CONSULTATION
  ESTIMATE
  FOLLOW_UP
  INSPECTION
  CONTRACT_SIGNING
  OTHER
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
  NO_SHOW
}

enum ActivityType {
  LEAD_CREATED
  LEAD_UPDATED
  NOTE_ADDED
  MEETING_SCHEDULED
  DOCUMENT_UPLOADED
  ESTIMATE_CREATED
  CONTRACT_CREATED
  STATUS_CHANGED
  APPOINTMENT_CREATED
  APPOINTMENT_UPDATED
}

enum ActivityStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum KnockStatus {
  NOT_VISITED     @map("Not Visited")
  KNOCKED
  NO_ANSWER       @map("No Answer")
  INTERESTED
  APPOINTMENT_SET @map("Appointment Set")
}

model File {
  id        String   @id @default(cuid())
  url       String
  name      String
  size      Int
  type      String
  category  String?
  
  // Relations
  leadId    String   @db.VarChar(255)
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([leadId])
  @@index([category])
}

model Contract {
  id            String    @id @default(uuid()) @db.Uuid
  leadId        String    @db.VarChar(255)
  contractType  String
  signatures    Json
  dates         Json
  names         Json
  addresses     Json
  contactInfo   Json
  pdfUrl        String?
  createdAt     DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime  @updatedAt @db.Timestamptz(6)
  
  // Relations
  lead          Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([leadId])
}
